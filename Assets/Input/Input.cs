//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""InputAny"",
            ""id"": ""cd1d3560-7544-4fd2-88fd-07b843de8d2f"",
            ""actions"": [
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""101b60ee-bb26-429a-b529-60ae2a2b20c5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""35a5b229-65c9-4dc4-bc56-fd282875b11e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e30eded7-9887-4b53-98e7-c3a8447b2128"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91479810-49ea-42ab-b482-16be8df696ea"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cf0a10d-b7f3-413e-a940-bc1e9f5861e8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""428d104b-9f07-48d3-9554-0387f336a164"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputAny
        m_InputAny = asset.FindActionMap("InputAny", throwIfNotFound: true);
        m_InputAny_ScreenPosition = m_InputAny.FindAction("ScreenPosition", throwIfNotFound: true);
        m_InputAny_Click = m_InputAny.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputAny
    private readonly InputActionMap m_InputAny;
    private List<IInputAnyActions> m_InputAnyActionsCallbackInterfaces = new List<IInputAnyActions>();
    private readonly InputAction m_InputAny_ScreenPosition;
    private readonly InputAction m_InputAny_Click;
    public struct InputAnyActions
    {
        private @Input m_Wrapper;
        public InputAnyActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPosition => m_Wrapper.m_InputAny_ScreenPosition;
        public InputAction @Click => m_Wrapper.m_InputAny_Click;
        public InputActionMap Get() { return m_Wrapper.m_InputAny; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputAnyActions set) { return set.Get(); }
        public void AddCallbacks(IInputAnyActions instance)
        {
            if (instance == null || m_Wrapper.m_InputAnyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputAnyActionsCallbackInterfaces.Add(instance);
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IInputAnyActions instance)
        {
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IInputAnyActions instance)
        {
            if (m_Wrapper.m_InputAnyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputAnyActions instance)
        {
            foreach (var item in m_Wrapper.m_InputAnyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputAnyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputAnyActions @InputAny => new InputAnyActions(this);
    public interface IInputAnyActions
    {
        void OnScreenPosition(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
